/* tslint:disable */
/* eslint-disable */
/**
 * Brightbirds.Pwa
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetVapidPublicKeyQueryResult
 */
export interface GetVapidPublicKeyQueryResult {
    /**
     * 
     * @type {string}
     * @memberof GetVapidPublicKeyQueryResult
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof GetVapidPublicKeyQueryResult
     */
    'publicKey': string;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * The user id of the subscriber.
     * @type {string}
     * @memberof RegisterRequest
     */
    'userId': string;
    /**
     * 
     * @type {SubscriptionViewModel}
     * @memberof RegisterRequest
     */
    'subscription': SubscriptionViewModel;
}
/**
 * 
 * @export
 * @interface SendPushNotificationRequest
 */
export interface SendPushNotificationRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof SendPushNotificationRequest
     */
    'toUserIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SendPushNotificationRequest
     */
    'message': string | null;
}
/**
 * `PushSubscription.toJSON()` json `keys` property as class<br />              See: <see href=\"https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON#return_value\">https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON#return_value</see>
 * @export
 * @interface SubscriptionKeys
 */
export interface SubscriptionKeys {
    /**
     * The javascript value `PushSubscription.getKey(\'p256dh\')` in base64.  <br />  See: <see href=\"https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/getKey#p256dh\">https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/getKey#p256dh</see>
     * @type {string}
     * @memberof SubscriptionKeys
     */
    'p256dh': string;
    /**
     * The javascript value `PushSubscription.getKey(\'auth\')` in base64.  <br />  See: <see href=\"https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/getKey#auth\">https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/getKey#auth</see>
     * @type {string}
     * @memberof SubscriptionKeys
     */
    'auth': string;
}
/**
 * `PushSubscription.toJSON()` result as class<br />              See: <see href=\"https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON#return_value\">https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON#return_value</see>
 * @export
 * @interface SubscriptionViewModel
 */
export interface SubscriptionViewModel {
    /**
     * `PushSubscription.endpoint` javascript property              <br />              See: <see href=\"https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/endpoint\">https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/endpoint</see>
     * @type {string}
     * @memberof SubscriptionViewModel
     */
    'endPoint': string;
    /**
     * 
     * @type {SubscriptionKeys}
     * @memberof SubscriptionViewModel
     */
    'keys': SubscriptionKeys;
}

/**
 * PushNotificationEndpointsApi - axios parameter creator
 * @export
 */
export const PushNotificationEndpointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllSubscriptionRecords: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PushNotification/Subscription/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionRecord: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteSubscriptionRecord', 'userId', userId)
            const localVarPath = `/PushNotification/Subscription/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPushSubscribers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PushNotification/Subscription/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVapidPublicKey: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PushNotification/VapidPublicKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPushSubscriptionRecord: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('registerPushSubscriptionRecord', 'registerRequest', registerRequest)
            const localVarPath = `/PushNotification/Subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendPushNotificationRequest} sendPushNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPushMessage: async (sendPushNotificationRequest: SendPushNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendPushNotificationRequest' is not null or undefined
            assertParamExists('sendPushMessage', 'sendPushNotificationRequest', sendPushNotificationRequest)
            const localVarPath = `/PushNotification/Send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendPushNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PushNotificationEndpointsApi - functional programming interface
 * @export
 */
export const PushNotificationEndpointsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PushNotificationEndpointsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllSubscriptionRecords(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllSubscriptionRecords(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PushNotificationEndpointsApi.deleteAllSubscriptionRecords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscriptionRecord(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubscriptionRecord(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PushNotificationEndpointsApi.deleteSubscriptionRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPushSubscribers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPushSubscribers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PushNotificationEndpointsApi.getAllPushSubscribers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVapidPublicKey(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVapidPublicKeyQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVapidPublicKey(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PushNotificationEndpointsApi.getVapidPublicKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPushSubscriptionRecord(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPushSubscriptionRecord(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PushNotificationEndpointsApi.registerPushSubscriptionRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SendPushNotificationRequest} sendPushNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPushMessage(sendPushNotificationRequest: SendPushNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPushMessage(sendPushNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PushNotificationEndpointsApi.sendPushMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PushNotificationEndpointsApi - factory interface
 * @export
 */
export const PushNotificationEndpointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PushNotificationEndpointsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllSubscriptionRecords(options?: any): AxiosPromise<void> {
            return localVarFp.deleteAllSubscriptionRecords(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionRecord(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSubscriptionRecord(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPushSubscribers(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getAllPushSubscribers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVapidPublicKey(options?: any): AxiosPromise<GetVapidPublicKeyQueryResult> {
            return localVarFp.getVapidPublicKey(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPushSubscriptionRecord(registerRequest: RegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.registerPushSubscriptionRecord(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendPushNotificationRequest} sendPushNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPushMessage(sendPushNotificationRequest: SendPushNotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.sendPushMessage(sendPushNotificationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PushNotificationEndpointsApi - object-oriented interface
 * @export
 * @class PushNotificationEndpointsApi
 * @extends {BaseAPI}
 */
export class PushNotificationEndpointsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationEndpointsApi
     */
    public deleteAllSubscriptionRecords(options?: RawAxiosRequestConfig) {
        return PushNotificationEndpointsApiFp(this.configuration).deleteAllSubscriptionRecords(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationEndpointsApi
     */
    public deleteSubscriptionRecord(userId: string, options?: RawAxiosRequestConfig) {
        return PushNotificationEndpointsApiFp(this.configuration).deleteSubscriptionRecord(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationEndpointsApi
     */
    public getAllPushSubscribers(options?: RawAxiosRequestConfig) {
        return PushNotificationEndpointsApiFp(this.configuration).getAllPushSubscribers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationEndpointsApi
     */
    public getVapidPublicKey(options?: RawAxiosRequestConfig) {
        return PushNotificationEndpointsApiFp(this.configuration).getVapidPublicKey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationEndpointsApi
     */
    public registerPushSubscriptionRecord(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return PushNotificationEndpointsApiFp(this.configuration).registerPushSubscriptionRecord(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendPushNotificationRequest} sendPushNotificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationEndpointsApi
     */
    public sendPushMessage(sendPushNotificationRequest: SendPushNotificationRequest, options?: RawAxiosRequestConfig) {
        return PushNotificationEndpointsApiFp(this.configuration).sendPushMessage(sendPushNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



